GENERATED += build/toolchain.cmake $(addprefix build/,$(LIB_NAMES))

AUTOTOOLS_ARGS  = "CC=$(CC)"
AUTOTOOLS_ARGS += "CXX=$(CXX)"
AUTOTOOLS_ARGS += "CPP=$(CPP)"
AUTOTOOLS_ARGS += "CFLAGS=$(CFLAGS)"
AUTOTOOLS_ARGS += "CXXFLAGS=$(CXXFLAGS)"
AUTOTOOLS_ARGS += "LDFLAGS=$(LDFLAGS)"
AUTOTOOLS_ARGS += "--with-sysroot=$(ROOT_PATH)"
AUTOTOOLS_ARGS += "--host=$(AUTOTOOLS_HOST)"

build/toolchain.cmake: build/makefile.mk
	echo '# FILE IS GENERATED BY MAKE - DO NOT EDIT' > $@
	echo 'set(CMAKE_SYSTEM_NAME $(SYSTEM_NAME))' >> $@
	echo 'set(CMAKE_C_COMPILER "$(CC)")' >> $@
	echo 'set(CMAKE_CXX_COMPILER "$(CXX)")' >> $@
	echo 'set(CMAKE_RC_COMPILER "$(WINDRES)")' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH "$(ROOT_PATH)")' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)' >> $@

define build-cmake
	rm -rf $@
	mkdir $@
	cd $@ && cmake "$(abspath src/$(notdir $@))" \
	               "-DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE)" \
	               "-DCMAKE_C_FLAGS=$(CFLAGS)" \
	               "-DCMAKE_CXX_FLAGS=$(CXXFLAGS)" \
	               "-DCMAKE_LINK_FLAGS=$(LDFLAGS)" \
	               "-DCMAKE_TOOLCHAIN_FILE=$(abspath build/toolchain.cmake)" \
	               "-C$(abspath build/$(notdir $@).cmake)"
	cd $@ && $(MAKE)
endef

define build-autotools
	rm -rf $@
	cp -R src/$(notdir $@) $@
	cd $@ && ./configure $(AUTOTOOLS_ARGS)
	cd $@ && touch Makefile.in # Workaround for a weird timing bug .. or so
	cd $@ && make
endef

ifeq $(SYSTEM_NAME) Windows
build/wxwidgets: AUTOTOOLS_ARGS += "--with-msw"
endif
ifeq $(SYSTEM_NAME) Linux
build/wxwidgets: AUTOTOOLS_ARGS += "--with-gtk"
endif
ifeq $(SYSTEM_NAME) Darwin
build/wxwidgets: AUTOTOOLS_ARGS += "--with-osx"
endif
build/wxwidgets: AUTOTOOLS_ARGS += "--enable-compat28"
build/wxwidgets: AUTOTOOLS_ARGS += "--enable-shared"
build/wxwidgets: src/wxwidgets build/toolchain.cmake
	$(build-autotools)

ifeq $(SYSTEM_NAME) Windows
build/lua: PLAT += "mingw"
endif
ifeq $(SYSTEM_NAME) Linux
build/lua: PLAT += "linux"
endif
ifeq $(SYSTEM_NAME) Darwin
build/lua: PLAT += "macosx"
endif
build/lua: src/lua
	rm -rf $@
	cp -R src/lua $@
	cd $@ && $(MAKE) PLAT=$(PLAT) \
	                 "CC=$(CC)" \
	                 "CFLAGS=$(CFLAGS) -DLUA_COMPAT_MODULE" \
	                 "LDFLAGS=$(LDFLAGS)" \
	                 "AR=$(AR) rcu" \
	                 "RANLIB=$(RANLIB)"

build/wxlua: src/wxlua build/wxwidgets build/lua build/toolchain.cmake
	$(build-cmake)

build/lua-cjson: src/lua-cjson build/lua build/toolchain.cmake
	$(build-cmake)

build/luafilesystem: src/luafilesystem build/lua
	rm -rf $@
	mkdir $@
	$(CC) $(CFLAGS) -fPIC -Ibuild/lua/src \
	      $(LDFLAGS) -shared -Lbuild/lua/src -llua52 \
	      -o $@/lfs$(SHARED_LIBRARY_POSTFIX) src/luafilesystem/src/lfs.c

build/zlib: src/zlib build/toolchain.cmake
	$(build-cmake)

build/libzip: src/libzip
	$(build-cmake)

build/lua-zip: src/lua-zip build/libzip build/lua build/toolchain.cmake
	$(build-cmake)

build/lanes: build/lua build/toolchain.cmake
	$(build-cmake)

build/luasocket: SRC = $(addprefix src/luasocket/src/,luasocket.c \
                                                      timeout.c \
                                                      buffer.c \
                                                      io.c \
                                                      auxiliar.c \
                                                      options.c \
                                                      except.c \
                                                      select.c \
                                                      tcp.c \
                                                      udp.c)

build/luasocket: src/luasocket build/lua build/toolchain.cmake
	$(build-cmake)
