GENERATED += build/toolchain.cmake $(addprefix build/,$(C_LIB_NAMES))

AUTOTOOLS_ARGS  = "CC=$(CC)"
AUTOTOOLS_ARGS += "CXX=$(CXX)"
AUTOTOOLS_ARGS += "CPP=$(CPP)"
AUTOTOOLS_ARGS += "CFLAGS=$(CFLAGS)"
AUTOTOOLS_ARGS += "CXXFLAGS=$(CXXFLAGS)"
AUTOTOOLS_ARGS += "LDFLAGS=$(LDFLAGS)"
AUTOTOOLS_ARGS += "--with-sysroot=$(ROOT_PATH)"
AUTOTOOLS_ARGS += "--host=$(AUTOTOOLS_HOST)"

build/toolchain.cmake:
	echo '# FILE IS GENERATED BY MAKE - DO NOT EDIT' > $@
	echo 'set(CMAKE_SYSTEM_NAME $(SYSTEM_NAME))' >> $@
	echo 'set(CMAKE_C_COMPILER "$(CC)")' >> $@
	echo 'set(CMAKE_CXX_COMPILER "$(CXX)")' >> $@
	echo 'set(CMAKE_RC_COMPILER "$(WINDRES)")' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH "$(ROOT_PATH)")' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)' >> $@

define build-cmake
	rm -rf $@
	mkdir $@
	cd $@ && cmake "$(abspath src/$(notdir $@))" \
	               "-DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE)" \
	               "-DCMAKE_C_FLAGS=$(CFLAGS)" \
	               "-DCMAKE_CXX_FLAGS=$(CXXFLAGS)" \
	               "-DCMAKE_LINK_FLAGS=$(LDFLAGS)" \
	               "-DCMAKE_TOOLCHAIN_FILE=$(abspath build/toolchain.cmake)" \
	               "-DSHARED_LIBRARY_PREFIX=$(SHARED_LIBRARY_PREFIX)" \
	               "-DSHARED_LIBRARY_POSTFIX=$(SHARED_LIBRARY_POSTFIX)" \
	               $(1)
	cd $@ && $(MAKE)
endef

define build-autotools
	rm -rf $@
	cp -R src/$(notdir $@) $@
	cd $@ && ./configure $(1)
	cd $@ && touch Makefile.in # Workaround for a weird timing bug .. or so
	cd $@ && make
endef

ifeq ($(SYSTEM_NAME), Linux)
define fix-wxwidget-libraries
	cd $@/lib && \
	for lib in libwx*.so.0.0.0; do \
	    cp $$lib $$(echo $$lib | grep -o 'libwx.*\.so'); \
	done
endef
else
define fix-wxwidget-libraries
endef
endif

ifeq ($(SYSTEM_NAME), Windows)
build/wxwidgets: AUTOTOOLS_ARGS += "--with-msw"
build/wxwidgets: AUTOTOOLS_ARGS += "LDFLAGS=-Wl,--allow-multiple-definition"
endif
ifeq ($(SYSTEM_NAME), Linux)
build/wxwidgets: AUTOTOOLS_ARGS += "--with-gtk"
endif
ifeq ($(SYSTEM_NAME), Darwin)
build/wxwidgets: AUTOTOOLS_ARGS += "--with-osx"
endif
build/wxwidgets: AUTOTOOLS_ARGS += "--enable-compat28"
build/wxwidgets: AUTOTOOLS_ARGS += "--enable-shared"
build/wxwidgets: AUTOTOOLS_ARGS += "--enable-monolithic"
build/wxwidgets: AUTOTOOLS_ARGS += "--disable-sys-libs"
build/wxwidgets: AUTOTOOLS_ARGS += "--disable-rpath"
build/wxwidgets: AUTOTOOLS_ARGS += "--enable-utf8only"
build/wxwidgets: src/wxwidgets
	$(call build-autotools,$(AUTOTOOLS_ARGS))
	$(call fix-wxwidget-libraries)

build/lua: src/lua build/toolchain.cmake
	$(call build-cmake)
	cp src/lua/src/*.h $@/

LUA_CMAKE_ARGS = "-DLUA_INCLUDE_DIR=$(abspath build/lua)" \
                 "-DLUA_LIBRARY=$(abspath build/lua/liblua$(SHARED_LIBRARY_POSTFIX))"

build/wxlua: src/wxlua build/wxwidgets build/lua build/toolchain.cmake
	$(call build-cmake,$(LUA_CMAKE_ARGS) -C$(abspath $@.cmake))

build/lua-cjson: src/lua-cjson build/lua build/toolchain.cmake
	$(call build-cmake,$(LUA_CMAKE_ARGS))

build/luafilesystem: src/luafilesystem build/lua build/toolchain.cmake
	$(call build-cmake,$(LUA_CMAKE_ARGS))

build/zlib: src/zlib build/toolchain.cmake
	$(call build-cmake)
	cp src/zlib/*.h $@/

ifeq ($(SYSTEM_NAME), Windows)
ZLIB_LIB = libzlibstatic.a
else
ZLIB_LIB = libzstatic.a
endif

build/libzip: src/libzip build/zlib build/toolchain.cmake
	$(call build-cmake,"-DZLIB_INCLUDE_DIR=$(abspath build/zlib)" \
	                   "-DZLIB_LIBRARY_RELEASE=$(abspath build/zlib/$(ZLIB_LIB))" \
	                   "-DZLIB_VERSION_STRING=1.1.2")
	cp src/libzip/lib/*.h build/libzip/

build/lua-zip: src/lua-zip build/libzip build/lua build/toolchain.cmake
	$(call build-cmake,$(LUA_CMAKE_ARGS) \
	                   "-DLIBZIP_INCLUDE_DIR=$(abspath build/libzip)" \
	                   "-DLIBZIP_LIBRARY=$(abspath build/libzip/lib/libzip$(SHARED_LIBRARY_POSTFIX))")

build/lanes: src/lanes build/lua build/toolchain.cmake
	$(call build-cmake,$(LUA_CMAKE_ARGS))

build/luasocket: src/luasocket build/lua build/toolchain.cmake
	$(call build-cmake,$(LUA_CMAKE_ARGS))
